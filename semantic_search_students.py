# -*- coding: utf-8 -*-
"""semantic_search_students.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MeBAIgxm5Qs9UVRoW1dnDewT0En4Srdm

## Instalando dependencias necesarias
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# %pip install -U sentence-transformers pandas
# from sentence_transformers import SentenceTransformer, util
#

"""## Entendiendo el dataset"""

# https://www.kaggle.com/datasets/omarhanyy/imdb-top-1000?resource=download
# TODO: Cargar el archivo del dataset con  pandas

# TODO: mostrar los primeros 5 registros de dataframe

from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv("/content/drive/IMDB top 1000.csv")

print(df.head())

"""## Usando Sentence Transformer para crear embeddings"""

model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')

#embeddings = model.encode(df[''],batch_size=64,show_progress_bar=True)
embeddings = model.encode(df['Description'],batch_size=64,show_progress_bar=True)

df['embeddings'] = embeddings.tolist()

print(df.head())

"""## Calculando la similitud usando la métrica de similitud por coseno"""

def compute_similarity(example, query_embedding):
    embedding = example['embeddings']
    similarity = util.cos_sim(embedding, query_embedding).item()
    return similarity

"""## Ejecuntando la búsqueda"""

query_embedding = model.encode(['a travel time adventure'])[0]
df['similarity'] = df.apply(lambda x: compute_similarity(x, query_embedding), axis=1)
df = df.sort_values(by='similarity', ascending=False)

df.head()['Title']
#df.head()['Description']